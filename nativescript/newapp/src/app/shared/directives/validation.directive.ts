// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import { Directive, Inject, Input, Self, Optional, OnInit, OnDestroy, ViewContainerRef, TemplateRef } from '@angular/core';
import { NgControl } from '@angular/forms';

import { Observable, Subscription, merge, EMPTY } from 'rxjs';

import { KS_FORM_VALIDATION_MESSAGES } from '@src/app/shared/directives/validation-messages';
import { StringUtilsService } from '@src/app/core/services/string-utils.service';
import { KsFormComponent } from '@src/app/shared/components/form/form.component';
import { KsGridComponent } from '@src/app/shared/components/grid/grid.component';

export interface FormValidationMessages {
    required?: string;
    requiredTrue?: string;
    min?: string;
    max?: string;
    minLength?: string;
    maxLength?: string;
    email?: string;
    pattern?: string;
    [key: string]: string;
}

@Directive({
    // tslint:disable-next-line: directive-selector
    selector: '[formControlName]'
})
export class ValidationDirective implements OnInit, OnDestroy {
    @Input() public validationMessages: FormValidationMessages;
    @Input() public errorTemplate: TemplateRef<any>;

    protected valueChangesSubscription: Subscription;
    protected formSubmits: Observable<any>;

    constructor(@Self() protected control: NgControl, protected viewContainer: ViewContainerRef, protected stringUtils: StringUtilsService,
        @Optional() protected parentForm: KsFormComponent,
        @Optional() protected parentGrid: KsGridComponent,
        @Inject(KS_FORM_VALIDATION_MESSAGES) protected defaultValidationMessages: FormValidationMessages
    ) {
        this.formSubmits = parentForm ? parentForm.formSubmits : EMPTY;
    }

    public ngOnInit() {
        this.valueChangesSubscription = merge(this.formSubmits, this.control.valueChanges).subscribe(() => {
            const errors = this.control.errors;
            this.viewContainer.remove();

            if (errors) {
                const errorTemplate = this.errorTemplate
                    || (this.parentForm && this.parentForm.errorTemplate)
                    || (this.parentGrid && this.parentGrid.errorTemplate);

                this.viewContainer.createEmbeddedView(errorTemplate, {
                    errorMessage: this.getErrorMessage(errors)
                });
            }
        });
    }

    public ngOnDestroy() {
        this.valueChangesSubscription.unsubscribe();
    }

    protected getErrorMessage(errors): string {
        const controlName = this.control.name;
        const fieldName = controlName[0].toUpperCase() + controlName.substr(1);
        const [errorType] = Object.keys(errors);
        const errorData = errors[errorType];
        const params = Object.assign({ fieldName, fieldValue: this.control.value }, errorData);
        const errorMessageTemplate = (this.validationMessages || {})[errorType]
            || this.defaultValidationMessages[errorType]
            || '${fieldName} has invalid value';

        return this.stringUtils.interpolate(errorMessageTemplate, params);
    }
}
