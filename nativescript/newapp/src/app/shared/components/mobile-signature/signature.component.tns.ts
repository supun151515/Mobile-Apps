// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import { Component, EventEmitter, Output, Input, forwardRef, ViewContainerRef } from '@angular/core';
import { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';

import { ImageAsset } from 'tns-core-modules/image-asset';
import * as is from 'tns-core-modules/image-source';
import { knownFolders, path, File } from 'tns-core-modules/file-system';

import { ModalDialogService, ModalDialogOptions } from 'nativescript-angular/modal-dialog';
import { SignatureModalComponent } from '@src/app/shared/components/mobile-signature/signature-modal.component';
import { KinveyService } from '@src/app/core/data/kinvey.service';

@Component({
    selector: 'ks-signature',
    templateUrl: './signature.component.html',
    providers: [{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => KSSignatureComponent),
        multi: true,
    },
        ModalDialogService]
})
export class KSSignatureComponent implements ControlValueAccessor {
    @Input() config: any;

    public fontClass = '';
    public fontIcon: string;
    public isUploading = false;
    public value: any;
    public signature: ImageAsset;
    public signPromise: Promise<any> = Promise.resolve();

    private onChange = (value: any) => { };

    constructor(private kinveyService: KinveyService,
        private modalService: ModalDialogService,
        private vcRef: ViewContainerRef) { }

    writeValue(obj: any): void {
        this.value = obj;
    }

    registerOnChange(fn: any): void {
        this.onChange = fn;
    }

    registerOnTouched(fn: any): void { }

    public setText() {
        // split the font icon classes, e.g. "fa fa-scan". "fa" goes to the "className" and "fa-scan" is converted to unicode character
        if (this.config && this.config['buttonText'] && this.config['buttonText'].icon) {
            const icon = this.config['buttonText'].icon.split(' ');
            this.fontClass = icon && icon.length === 2 && icon[0];
            this.fontIcon = icon && icon.length && icon[icon.length - 1];
        }
    }

    startSign() {
        const options: ModalDialogOptions = {
            viewContainerRef: this.vcRef,
            context: {
                penWidth: this.config.penWidth,
                penColor: this.config.penColor,
                imageType: this.config.imageType
            },
            fullscreen: true
        };
        this.modalService.showModal(SignatureModalComponent, options)
            .then((image: any) => {
                if (typeof image === 'string') {
                    this.value = image;
                    this.onChange(this.value);
                } else if (image) {
                    this.saveToDataStore(image);
                }
            });
    }

    private saveToDataStore(imageAsset: ImageAsset) {
        this.signature = imageAsset;
        const asset = is.fromNativeSource(imageAsset);
        const fileExt = 'jpg';
        const filePath = path.join(knownFolders.temp().path, `${new Date().getTime()}.${fileExt}`);
        asset.saveToFile(filePath, fileExt, 0.8);
        const file = File.fromPath(filePath);
        const metadata = {
            filename: file.name,
            public: true,
            mimeType: 'image/jpeg'
        };
        this.isUploading = true;
        return this.kinveyService.filesUpload({ kinveyFileTLS: true }, file, metadata).then(uploadedFile => {
            this.onChange({ _type: 'KinveyFile', _id: uploadedFile._id });
        }).catch(err => {
            alert('Error while uploading signature!');
        }).finally(() => {
            this.isUploading = false;
        });

    }
}
