// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import { Component, Input, forwardRef } from '@angular/core';
import { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';

let barcodescanner;
try {
    barcodescanner = require('nativescript-barcodescanner');
} catch {
    console.log('Missing \'nativescript-barcodescanner\' plugin, the barcode scanner component cannot be used!');
    barcodescanner = {
        BarcodeScanner: () => {},
        ScanOptions: {}
    };
}

@Component({
    selector: 'ks-barcode-scanner',
    templateUrl: './barcode-scanner.component.html',
    providers: [{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => KSBarcodeScannerComponent),
        multi: true,
    }]
})
export class KSBarcodeScannerComponent implements ControlValueAccessor {

    @Input()
    public config: any;

    private barcodeScanner = new barcodescanner.BarcodeScanner();
    public value: string;
    public fontClass = '';
    public fontIcon: string;
    private onChange = (_: any) => { };

    constructor() { }

    writeValue(value: any): void {
        this.value = value;
    }

    registerOnChange(fn: any): void {
        this.onChange = fn;
    }

    registerOnTouched(fn: any): void { }

    public setText() {
        // split the font icon classes, e.g. "fa fa-scan". "fa" goes to the "className" and "fa-scan" is converted to unicode character
        if (this.config && this.config['buttonText'] && this.config['buttonText'].icon) {
            const icon = this.config['buttonText'].icon.split(' ');
            this.fontClass = icon && icon.length === 2 && icon[0];
            this.fontIcon = icon && icon.length && icon[icon.length - 1];
        }
    }

    public startScan() {
        this.barcodeScanner.scan(this.config).then((result) => {
            this.value = result.text;
            this.onChange(this.value);
            if (typeof this.config['scanCallback'] === 'function') {
                this.config['scanCallback'](result);
            }
        }, (errorMessage) => {
            console.log('No Barcode scanned. ' + errorMessage);
        });
    }
}
