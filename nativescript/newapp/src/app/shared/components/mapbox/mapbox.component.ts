// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import * as mapboxgl from 'mapbox-gl';
import { Component, Input, Injector, EventEmitter, Output, OnInit, OnDestroy } from '@angular/core';
import { StringUtilsService } from '@src/app/core/services/string-utils.service';

@Component({
    selector: 'ks-mapbox-web',
    templateUrl: './mapbox.component.html'
})
export class KSMapboxComponent implements OnInit, OnDestroy {
    @Input() public config: {
        id: string,
        marker: {
            title: string;
            subtitle: string;
            navigateTo?: {
                allowBackNavigation: boolean;
                module?: string;
                view?: string;
            }
        },
        accessToken: string;
        zoomLevel: number;
        scrollZoom: boolean;
        latitude: number;
        longitude: number;
        showUserLocation: boolean;
    };

    @Input() public set data(value) {
        if (!value) {
            return;
        }

        let markersData: Array<any>;

        if (Array.isArray(value)) {
            markersData = value;
        } else if (Array.isArray(value.data)) {
            markersData = value.data;
        }

        (markersData || []).forEach(item => this.addMarker(item));
    }

    @Output() public beforeMapLoad: EventEmitter<any> = new EventEmitter();
    @Output() public beforeMarkerAdded: EventEmitter<any> = new EventEmitter();
    @Output() public markerClicked: EventEmitter<any> = new EventEmitter();

    private stringUtilsService: StringUtilsService;
    private mapbox: mapboxgl.Map;
    private activePopup: mapboxgl.Popup;

    constructor(public injector: Injector) {
        this.stringUtilsService = injector.get(StringUtilsService);
    }

    ngOnInit() {
        mapboxgl.accessToken = this.config.accessToken;

        const mapEvent = {
            options: {
                container: this.config.id,
                style: 'mapbox://styles/mapbox/light-v10',
                center: [this.config.longitude, this.config.latitude],
                zoom: this.config.zoomLevel,
                scrollZoom: this.config.zoomLevel
            },
            mapboxgl
        };
        this.beforeMapLoad.emit(mapEvent);

        this.mapbox = new mapboxgl.Map(mapEvent.options);

        if (this.config.showUserLocation) {
            const geolocateControl = new mapboxgl.GeolocateControl({
                positionOptions: {
                    enableHighAccuracy: true
                },
                trackUserLocation: true
            });
            this.mapbox.addControl(geolocateControl);

            this.mapbox.once('load', () => {
                geolocateControl.trigger();
            });
        }
    }

    addMarker(item) {
        const markerInfo = this.createMarker(item);
        const marker = new mapboxgl.Marker()
            .setLngLat(markerInfo._geoloc);

        const addMarkerEvent = {
            marker,
            mapboxgl,
            mapboxEl: this.mapbox
        };

        this.beforeMarkerAdded.emit(addMarkerEvent);

        if (addMarkerEvent.marker) {
            addMarkerEvent.marker.addTo(this.mapbox);
            addMarkerEvent.marker._element.addEventListener('click', () => {
                const clickedEvent = {
                    handled: false,
                    mapboxgl,
                    mapboxEl: this.mapbox,
                    markerInfo
                };

                this.markerClicked.emit(clickedEvent);
                if (!clickedEvent.handled) {
                    this.closePopups();

                    this.activePopup = new mapboxgl.Popup({ closeOnClick: false })
                        .setLngLat(markerInfo._geoloc)
                        .setHTML(`<h3>${markerInfo.title}</h3><h4>${markerInfo.subtitle}</h4>`)
                        .addTo(this.mapbox);

                    const escapeHandler = e => e.code === 'Escape' && this.closePopups();
                    document.addEventListener('keyup', escapeHandler);
                    this.activePopup.once('close', () => document.removeEventListener('keyup', escapeHandler));
                }
            });
        }
    }

    public ngOnDestroy(): void {
        this.closePopups();
    }

    private closePopups() {
        if (this.activePopup) {
            this.activePopup.remove();
            this.activePopup = null;
        }
    }

    private createMarker(item: any) {
        const title = this.stringUtilsService.interpolate(this.config.marker.title, { item });
        const subtitle = this.stringUtilsService.interpolate(this.config.marker.subtitle, { item });

        return {
            id: item._id,
            _geoloc: item._geoloc,
            title,
            subtitle,
        };
    }
}
