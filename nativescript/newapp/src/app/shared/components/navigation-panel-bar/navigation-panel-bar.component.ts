// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import { Component, Input, Output, ViewChild, OnInit, Injector, EventEmitter } from '@angular/core';
import { Router } from '@angular/router';
import { PanelBarComponent } from '@progress/kendo-angular-layout';
import { EventsService } from '@src/app/core/services/events.service';

@Component({
    selector: 'ks-navigation-panel-bar',
    templateUrl: './navigation-panel-bar.component.html',
})
export class KsNavigationPanelBarComponent implements OnInit {
    @Input() public config: any;
    @Input() public id: string;
    @Input() public navigationData: any;
    @Input() public style: any;
    @Output() public navItemClick: EventEmitter<void> = new EventEmitter();

    @ViewChild('nav', { static: true }) public nav: PanelBarComponent;

    public navItems: any;
    public navGroupItems: any;

    protected eventsService: EventsService;
    protected router: Router;

    constructor(injector: Injector) {
        this.eventsService = injector.get(EventsService);
        this.router = injector.get(Router);
    }

    public stateChange() {
        this.nav.contentChildItems
            .filter(group => group.hasChildItems)
            .forEach((item, index) => {
                this.navGroupItems[index].expanded = item.expanded;
            });
    }

    public onItemClick() {
        this.navItemClick.emit();
    }

    public ngOnInit() {
        this.navItems = this.navigationData.filter(item => !item.children.length);
        this.navGroupItems = this.navigationData.filter(item => item.children.length);

        this.navItems.some(item => {
            if (item.routerLink === '') {
                item.routerLink = '/';
                return true;
            }
        });

        this.navGroupItems.forEach(group => {
            group.children.forEach(child => {
                child.expanded = child.routerLink === this.router.url;
            });

            group.expanded = group.children.some(c => c.expanded);
        });
    }
}
