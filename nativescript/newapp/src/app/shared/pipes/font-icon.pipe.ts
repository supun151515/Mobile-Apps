// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import { Pipe, PipeTransform } from '@angular/core';
import { getRootView } from 'tns-core-modules/application';

/*
 * Replaces a string class name for a font icon (fontawesome, webcomponenticons) with the unicode representation.
 * Usage:
 *   value | fontIcon
 * Example:
 *   {{ 'k-i-barcode-qr-code-scanner' | fontIcon }}
 *   formats to: \\0xe157
 *
 *   {{ 'fa-chevron-right' | fontIcon }}
 *   formats to: \\0xf054
*/
@Pipe({
    name: 'fontIcon',
    pure: false
})
export class FontIconPipe implements PipeTransform {
    private cachedValue: string;
    private cachedResult: string;

    transform(value: string): string {
        if (this.cachedValue === value && this.cachedResult) {
            return this.cachedResult;
        }

        if (!value) {
            return value;
        }

        const rootView = getRootView();
        const scope = rootView && rootView['_styleScope'];

        if (!scope || !scope._selectors) {
            return;
        }

        this.cachedValue = value;
        this.cachedResult = value;

        const icon = scope._selectors.class[value];
        if (!icon) {
            return value;
        }

        icon.flatMap(val => val.sel.ruleset.declarations)
            .reverse()
            .some(dec => {
                if (dec.property !== 'content') {
                    return;
                }

                const char: string = dec.value.replace(/^"|"$/g, '');
                const charcode = char.startsWith('\\') && (char.match(/[a-f\d]{2,4}/i) || [])[0];

                value = charcode ? String.fromCharCode(Number.parseInt(charcode, 16)) : char;

                return true;
            });

        this.cachedResult = value;

        return value;
    }
}
