// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import { Component, AfterViewInit, ViewChild, ViewEncapsulation, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { RadSideDrawerComponent } from 'nativescript-ui-sidedrawer/angular';
import { AuthenticationService } from '@src/app/core/auth/authentication.service';
import { NavigationService } from '@src/app/core/services/navigation.service';
import { SideDrawerService } from '@src/app/core/services/side-drawer.service';
import { AppConfigService } from '@src/app/core/app-config.service';
import * as app from 'tns-core-modules/application/application';
import { isAndroid } from 'tns-core-modules/platform';
import { topmost } from 'tns-core-modules/ui/frame';
import { HomeViewComponent } from '@src/app/modules/system/home/home.component';

@Component({
    templateUrl: './app.component.html',
    encapsulation: ViewEncapsulation.None,
    styleUrls: ['./app.custom.tns.css']
})
export class AppComponent implements AfterViewInit, OnInit {
    @ViewChild(RadSideDrawerComponent, { static: false })
    public drawerComponent: RadSideDrawerComponent;

    get user() {
        return this.authenticationService.activeUser;
    }

    get sideDrawerGesturesEnabled(): boolean {
        return this.sideDrawerService.isEnabled;
    }

    constructor(
        private router: Router,
        private appConfigService: AppConfigService,
        private authenticationService: AuthenticationService,
        private navigationService: NavigationService,
        private sideDrawerService: SideDrawerService
    ) {}

    ngOnInit(): void {
        this.setupAndroidBackPress();
    }

    ngAfterViewInit(): void {
        if (this.drawerComponent) {
            this.sideDrawerService.initialize(this.drawerComponent.sideDrawer);
        }
    }

    login() {
        this.sideDrawerService.close();
        this.authenticationService.authenticate();
    }

    logout() {
        const homeViewPath = this.navigationService
            .getComponentPathFromRoot(this.router.routerState.snapshot.root, HomeViewComponent)
            .map(route => route && route.url.join('/'))
            .join('/');

        this.sideDrawerService.close();
        this.authenticationService
            .signOut()
            .toPromise()
            .then(() =>
                this.navigationService.navigate([homeViewPath], {
                    relativeTo: this.router.routerState.root,
                    clearHistory: true
                })
            );
    }

    open(path: string) {
        this.sideDrawerService.close();
        this.navigationService.navigate([path]);
    }

    onLoaded(): void {
        this.appConfigService.init();
    }

    private canGoBack() {
        const frame = topmost();

        return frame.canGoBack();
    }

    private goBack() {
        const frame = topmost();

        return frame.goBack();
    }

    private setupAndroidBackPress(): void {
        if (!isAndroid || !this.router) {
            return;
        }

        const backPressedHandler = (args: any) => {
            if (this.canGoBack()) {
                args.cancel = true;

                this.goBack();
            }
        };

        app.android.on(app.AndroidApplication.activityBackPressedEvent, backPressedHandler);
    }
}
