// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// You can write your custom code in the customers.component.tns.ts file instead.
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import { AfterViewInit, Component, Injector } from '@angular/core';
import { ActivatedRoute } from '@angular/router';

import { Observable, Subject } from 'rxjs';
import { Page } from 'tns-core-modules/ui/page';

import { CollectionDataService, CollectionState } from '@src/app/core/data/collection-data.service';
import { InitDataServiceOptions, combineObservables, getDataObservable } from '@src/app/core/data/helpers/data-service-utils';
import { DataServiceConfig, DataServiceFactory } from '@src/app/core/data/helpers/data-service.factory';
import { EventsService } from '@src/app/core/services/events.service';
import { NavigationService } from '@src/app/core/services/navigation.service';
import { UtilsService } from '@src/app/core/services/utils.service';
import { Mysql, getMysqlConfig } from '@src/app/data/mysql.model';

@Component({
    templateUrl: './customers.component.html',
    styleUrls: ['./customers.component.css']
})
export class CustomersViewBaseComponent implements AfterViewInit {
    public config = {
        listView: {
            navigateOnItemTap: {
                allowBackNavigation: false
            }
        }
    };

    public data: Observable<any>;
    public loading: Observable<{ [key: string]: boolean }>;
    public mysqlService: CollectionDataService<Mysql>;

    protected activatedRoute: ActivatedRoute;
    protected afterViewInit = new Subject<any>();
    protected eventsService: EventsService;
    protected navigationService: NavigationService;
    protected page: Page;
    protected serviceFactory: DataServiceFactory;
    protected utilsService: UtilsService;

    constructor(public injector: Injector) {
        this.activatedRoute = injector.get(ActivatedRoute);
        this.eventsService = injector.get(EventsService);
        this.navigationService = injector.get(NavigationService);
        this.page = injector.get(Page);
        this.serviceFactory = injector.get(DataServiceFactory);
        this.utilsService = injector.get(UtilsService);

        const { dataServices, observables, loading } = this.initData(this.getDataConfig());

        this.data = getDataObservable({ dataServices, observables });
        this.loading = combineObservables(loading);

        this.page.enableSwipeBackNavigation = false;
    }

    public ngAfterViewInit(): void {
        this.afterViewInit.next();
    }

    protected getDataConfig(): { [key: string]: DataServiceConfig } {
        const mysqlConfig = getMysqlConfig();
        mysqlConfig.loadOnDemand = true;
        return { mysql: mysqlConfig };
    }

    protected initData(config: { [key: string]: DataServiceConfig }) {
        this.mysqlService = this.serviceFactory.collection<Mysql>(config.mysql);

        const mysqlOptions: InitDataServiceOptions<CollectionState> = {
            instance: this.mysqlService,
            initialState: {
                skip: 0,
                take: 20
            }
        };

        return {
            dataServices: {
                mysql: mysqlOptions
            },
            observables: {},
            loading: {
                mysql: this.mysqlService.isLoading
            }
        };
    }
}
