// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// You can write your custom code in the login.component.ts file instead.
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import { Component, Injector } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { FormGroup, FormControl, Validators } from '@angular/forms';

import { Observable } from 'rxjs';

import { AuthenticationService } from '@src/app/core/auth/authentication.service';

@Component({
    templateUrl: './login.component.html',
    styleUrls: ['./login.component.css']
})
export class LoginViewBaseComponent {
    public config = {
        title: 'Login'
    };

    public loginForm: FormGroup;
    public loginError: string;

    protected router: Router;
    protected activatedRoute: ActivatedRoute;
    protected authenticationService: AuthenticationService;

    constructor(protected injector: Injector) {
        this.router = injector.get(Router);
        this.activatedRoute = injector.get(ActivatedRoute);
        this.authenticationService = injector.get(AuthenticationService);

        this.loginForm = new FormGroup({
            username: new FormControl('', Validators.required),
            password: new FormControl('', Validators.required)
        });
    }

    public login() {
        const { username, password } = this.loginForm.value;

        this.authenticationService
            .signIn({ username, password })
            .toPromise()
            .then(() => {
                const navigate = () => this.router.navigate([this.activatedRoute.snapshot.queryParams.returnUrl || '']);
                const onLoginResult = this['onLogin']({ username });
                if (onLoginResult instanceof Observable) {
                    onLoginResult.subscribe(() => navigate());
                    return;
                }

                navigate();
            })
            .catch(error => {
                this.loginError = 'Invalid credentials';
            });
    }

    navigateToRegister() {
        this.router.navigate(['register']);
    }
}
