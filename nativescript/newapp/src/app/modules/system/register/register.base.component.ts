// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// You can write your custom code in the register.component.ts file instead.
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import { Component, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { CustomValidators } from '@src/app/shared/components/custom-validators';

import { Observable, isObservable } from 'rxjs';

import { AuthenticationService } from '@src/app/core/auth/authentication.service';

@Component({
    templateUrl: './register.component.html',
    styleUrls: ['./register.component.css']
})
export class RegisterViewBaseComponent {
    public config = {
        title: 'Register'
    };

    public registerForm: FormGroup;
    public registerError: string;

    protected router: Router;
    protected authenticationService: AuthenticationService;

    get email() {
        return this.registerForm.controls.email;
    }

    get username() {
        return this.registerForm.controls.username;
    }

    get password() {
        return this.registerForm.controls.password;
    }

    get confirmPassword() {
        return this.registerForm.controls.confirmPassword;
    }

    constructor(protected injector: Injector) {
        this.router = injector.get(Router);
        this.authenticationService = injector.get(AuthenticationService);

        this.registerForm = new FormGroup(
            {
                email: new FormControl('', [Validators.required, Validators.email]),
                username: new FormControl('', [Validators.required, CustomValidators.noWhitespaceValidator]),
                password: new FormControl('', [Validators.required, CustomValidators.noWhitespaceValidator]),
                confirmPassword: new FormControl('', [Validators.required, CustomValidators.noWhitespaceValidator])
            },
            { validators: CustomValidators.mustMatch('password', 'confirmPassword'), updateOn: 'blur' }
        );
    }

    public register() {
        if (this.registerForm.invalid) {
            return;
        }

        const { username, password, email, confirmPassword } = this.registerForm.value;

        const user = Object.assign({}, this.getSignUpInfo());
        delete user.confirmPassword;

        this.authenticationService
            .signUp(user)
            .toPromise()
            .then(() => {
                const onRegisterResult = this['onRegister']({ username });
                if (isObservable(onRegisterResult)) {
                    onRegisterResult.subscribe(() => this.router.navigate(['system/login']));
                    return;
                }

                this.router.navigate(['system/login']);
            })
            .catch(error => {
                this.registerError = (error && error.message) || 'Registration failed.';
            });
    }

    protected getSignUpInfo() {
        return this.registerForm.value;
    }
}
