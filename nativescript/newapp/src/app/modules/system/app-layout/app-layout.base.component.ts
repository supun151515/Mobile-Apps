// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// You can write your custom code in the app-layout.component.ts file instead.
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import { AfterViewInit, Component, Injector } from '@angular/core';
import { ActivatedRoute } from '@angular/router';

import { Observable, Subject } from 'rxjs';
import { map } from 'rxjs/operators';

import { InitDataServiceOptions, combineObservables, getDataObservable } from '@src/app/core/data/helpers/data-service-utils';
import { DataServiceConfig, DataServiceFactory } from '@src/app/core/data/helpers/data-service.factory';
import { EventsService } from '@src/app/core/services/events.service';
import { NavigationService } from '@src/app/core/services/navigation.service';
import { UtilsService } from '@src/app/core/services/utils.service';
import { TranslationsProvider } from '@src/app/core/translations.provider';

@Component({
    templateUrl: './app-layout.component.html',
    styleUrls: ['./app-layout.component.css']
})
export class AppLayoutViewBaseComponent implements AfterViewInit {
    public config = {
        hamburgerbutton0: {},
        image0: {
            navigateUrl: '/',
            alt: ''
        },
        languagesDdl: {
            data: this.getLanguages(),
            textField: 'label',
            valueField: 'key'
        },
        userdropdown0: {},
        navigationpanelbar0: {}
    };

    public data: Observable<any>;
    public loading: Observable<{ [key: string]: boolean }>;
    public navigationData = [
        {
            title: 'home',
            children: [],
            routerLink: ''
        },
        {
            title: 'Main',
            children: [
                {
                    title: 'Customers',
                    routerLink: '/main/customers'
                }
            ]
        }
    ];

    protected activatedRoute: ActivatedRoute;
    protected afterViewInit = new Subject<any>();
    protected eventsService: EventsService;
    protected menuState: Observable<boolean>;
    protected navigationService: NavigationService;
    protected serviceFactory: DataServiceFactory;
    protected translationsProvider: TranslationsProvider;
    protected utilsService: UtilsService;

    constructor(public injector: Injector) {
        this.activatedRoute = injector.get(ActivatedRoute);
        this.eventsService = injector.get(EventsService);
        this.navigationService = injector.get(NavigationService);
        this.serviceFactory = injector.get(DataServiceFactory);
        this.translationsProvider = injector.get(TranslationsProvider);
        this.utilsService = injector.get(UtilsService);

        const { dataServices, observables, loading } = this.initData(this.getDataConfig());

        this.data = getDataObservable({ dataServices, observables });
        this.loading = combineObservables(loading);

        this.translationsProvider.useDefaultLanguage();

        this.menuState = this.eventsService.filter('menu.toggle').pipe(
            map(({ payload }) => {
                return payload.visible;
            })
        );
    }

    public ngAfterViewInit(): void {
        this.afterViewInit.next();
    }

    public getLanguages(): any[] {
        return [
            {
                label: 'English',
                culture: 'en-US',
                order: 0,
                key: 'translations.default'
            }
        ];
    }

    protected getDataConfig(): { [key: string]: DataServiceConfig } {
        return {};
    }

    protected initData(config: { [key: string]: DataServiceConfig }) {
        return {
            dataServices: {},
            observables: {},
            loading: {}
        };
    }
}
