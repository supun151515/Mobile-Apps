// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import { Injectable, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { Observable, from, BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';

import { AuthorizationGrant, Errors, UserService, User } from '@src/app/core/libs/kinvey-sdk';
import { NavigationService } from '@src/app/core/services/navigation.service';

@Injectable()
export class AuthenticationService {
    public readonly activeUser: Observable<User>;
    public readonly isAuthenticated: Observable<boolean>;
    public snapshot: { activeUser: User, isAuthenticated: boolean };

    private navigationService: NavigationService;
    private router: Router;
    private userService: UserService;
    private activeUserSubject: BehaviorSubject<User>;

    constructor(injector: Injector) {
        this.navigationService = injector.get(NavigationService);
        this.router = injector.get(Router);
        this.userService = injector.get(UserService);

        this.activeUserSubject = new BehaviorSubject<User>(this.userService.getActiveUser());
        this.activeUser = this.activeUserSubject.asObservable();
        this.isAuthenticated = this.activeUser.pipe(
            map(activeUser => {
                this.snapshot = { activeUser, isAuthenticated: !!activeUser };
                return this.snapshot.isAuthenticated;
            })
        );
    }

    authenticate(returnUrl?: string): void {
        if (returnUrl === null) {
            returnUrl = '/';
        }

        returnUrl = returnUrl
            || this.router.routerState.root.snapshot.queryParams.returnUrl
            || this.router.routerState.snapshot.url;

        this.navigationService.navigate(['login'], {
            queryParams: { returnUrl },
            clearHistory: true
        });
    }

    signIn(...args): Observable<any> {
        return from(this.userService.login.apply(this.userService, args)
            .then((user) => this.activeUserSubject.next(user))
            .catch((e) => this.handlePromiseError(e)));
    }

    signOut(): Observable<any> {
        return from(this.userService.logout()
            .then(() => this.activeUserSubject.next(null))
            .catch((e) => this.handlePromiseError(e)));
    }

    signUp(...args): Observable<any> {
        return from(this.userService.signup.apply(this.userService, args)
            .then((user) => this.activeUserSubject.next(user))
            .catch((e) => this.handlePromiseError(e)));
    }

    resetPassword(email: string, options?: { timeout?: number; }): Observable<any> {
        return from(this.userService.resetPassword(email, options)
            .catch((e) => this.handlePromiseError(e)));
    }

    signInExternal(redirectUri?: string, authorizationGrant?: AuthorizationGrant, options?: any): Observable<any> {
        return from(this.userService.loginWithMIC(redirectUri, authorizationGrant, options)
            .then((user) => this.activeUserSubject.next(user))
            .catch((e) => this.handlePromiseError(e)));
    }

    isAuthError(error: Error) {
        return error instanceof Errors.InvalidCredentialsError || error instanceof Errors.NoActiveUserError;
    }

    private handlePromiseError(error) {
        this.handleError(error);
        throw error;
    }

    private handleError(error) {
        if (this.isAuthError(error)) {
            this.authenticate();
            return true;
        }

        return false;
    }
}
