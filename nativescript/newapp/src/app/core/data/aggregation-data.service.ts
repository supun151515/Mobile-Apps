// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import { Observable, Subject, merge } from 'rxjs';
import { flatMap, last, map, shareReplay, withLatestFrom } from 'rxjs/operators';

import { combineFilters, cleanupState } from '@src/app/core/data/helpers/data-state-utils';
import { DataServiceConfig } from '@src/app/core/data/interfaces/data-service-config.interface';
import { BaseDataService } from '@src/app/core/data/base-data.service';
import { StateMap, GroupResult, AggregationState } from '@src/app/core/data/data-state.service';

export { AggregationState };

export class AggregationDataService extends BaseDataService<GroupResult, DataServiceConfig, AggregationState> {
    public refresh(): Promise<any> {
        return this.toPromise(() => this.getDataReload().next());
    }

    protected getDataChanges(): Observable<GroupResult> {
        const groupObservable = state => this.kinveyService.group(this.config, state).pipe(
            this.handleObservableError(),
            last(value => !!value)
        );

        return merge(
            this.getDataReload().pipe(
                withLatestFrom(this.dataState.changes),
                map(([_, state]) => state)
            ),
            this.dataState.changes
        ).pipe(
            flatMap(state => groupObservable(state)),
            shareReplay({
                bufferSize: 1,
                refCount: true
            })
        );
    }

    protected combineStates(stateMap: StateMap<AggregationState>): AggregationState {
        const combinedState = Object.values(stateMap).reduce((acc, state) => {
            if (state.group) {
                acc.group = (acc.group || []).concat(state.group);
            }

            return acc;
        }, {});

        const stateFilter = combineFilters(Object.values(stateMap).filter(state => state.filter).map(state => state.filter));

        if (stateFilter) {
            combinedState.filter = stateFilter;
        }

        return cleanupState(combinedState);
    }

    protected getDataReload(): Subject<any> {
        return this.kinveyService.getDataReload(this.config.collection);
    }
}
