// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import { Params, convertToParamMap } from '@angular/router';
import { Observable } from 'rxjs';
import { map, filter } from 'rxjs/operators';

import { StateReducer, EntityState, CollectionState, CompositeFilterDescriptor } from '@src/app/core/data/data-state.service';

export function mapRouterParamsToEntityState(params: Observable<Params>, idParam: string): Observable<StateReducer<EntityState>> {
    return params.pipe(
        map((p: Params) => {
            const paramMap = convertToParamMap(p);
            return () => paramMap.has(idParam) ? { id: paramMap.get(idParam) } as EntityState : null;
        }),
        filter(v => !!v)
    );
}

export function findEntity(source: Observable<any>, idValueField: string, idKeyField?: string): Observable<StateReducer<EntityState>> {
    return source.pipe(
        map(item => () => (!idKeyField || idKeyField === '_id' ? { id: item[idValueField] } : {
            filter: {
                logic: 'and',
                filters: [{
                    field: idKeyField,
                    operator: 'eq',
                    value: item[idValueField],
                    ignoreCase: false
                }]
            }
        }) as EntityState)
    );
}

export interface FilterCollectionOptions {
    source: Observable<any>;
    filterByField: string;
    filterValueField: string;
    take: number;
}

// tslint:disable-next-line:max-line-length
export function filterCollectionByEntity({ source, filterByField, filterValueField, take }: FilterCollectionOptions): Observable<StateReducer<CollectionState>> {
    return source.pipe(
        map(item => () => ({
            skip: 0,
            take,
            filter: {
                logic: 'or',
                filters: [
                    {
                        field: filterByField,
                        operator: 'eq',
                        value: item[filterValueField]
                    }
                ]
            }
        } as CollectionState))
    );
}

export function combineFilters(filters: CompositeFilterDescriptor[]): CompositeFilterDescriptor {
    return filters.length
        ? {
            logic: 'and',
            filters: filters
        }
        : null;
}

export function cleanupState(state: {}) {
    const keys = Object.keys(state).filter(key => typeof state[key] === 'undefined' || Array.isArray(state[key]) && !state[key].length)
        .forEach(key => {
            delete state[key];
        });

    return state;
}
