// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import { Observable, Subject, merge, of } from 'rxjs';
import { flatMap, last, map, pairwise, scan, shareReplay, tap, withLatestFrom } from 'rxjs/operators';

import { combineFilters, cleanupState } from '@src/app/core/data/helpers/data-state-utils';
import { DataServiceConfig } from '@src/app/core/data/interfaces/data-service-config.interface';
import { PagingDataResult } from '@src/app/core/data/interfaces/paging-data-result.interface';
import { BaseDataService } from '@src/app/core/data/base-data.service';
import { StateMap, CollectionState } from '@src/app/core/data/data-state.service';

export { CollectionState };

class InternalState {
    public collectionState: CollectionState;
    public loadMorePage: number;

    constructor(collectionState: CollectionState, loadMorePage: number = 0) {
        this.collectionState = collectionState;
        this.loadMorePage = loadMorePage;
    }
}

export class CollectionDataService<T> extends BaseDataService<T, DataServiceConfig, CollectionState> {
    protected loadOnDemand: Subject<any>;

    public refresh(): Promise<any> {
        return this.toPromise(() => this.getDataReload().next());
    }

    public loadMore(): Promise<any> {
        return this.toPromise(() => {
            if (this.loadOnDemand) {
                this.loadOnDemand.next();
            }
        });
    }

    public save(item: T): Promise<any> {
        return this.kinveyService.save(this.config, item)
            .then(() => this.refresh())
            .catch(error => this.handlePromiseError(error));
    }

    public remove(item: T): Promise<any> {
        return this.kinveyService.remove(this.config, item)
            .then(() => this.refresh())
            .catch(error => this.handlePromiseError(error));
    }

    public createModel(): T {
        return this.config.createModel();
    }

    protected getDataChanges(): Observable<PagingDataResult<T> | T[]> {
        if (this.config.loadOnDemand) {
            this.loadOnDemand = new Subject<any>();

            return this.getStateObservableWithLoadMore().pipe(
                flatMap(state => this.getQueryObservableWithLoadMore(state).pipe(
                    this.handleObservableError(),
                    last(value => !!value),
                    map(items => ({ items, state }))
                )),
                scan((oldItems, value: { items: any[], state: InternalState }) => {
                    if (value.state.loadMorePage) {
                        const uniqueIds = new Set(oldItems.map(item => item._id));
                        return oldItems.concat(value.items.filter(item => !uniqueIds.has(item._id)));
                    }

                    return value.items;
                }, []),
                map(items => this.mapData(items)),
                shareReplay({
                    bufferSize: 1,
                    refCount: true
                })
            );
        }

        return this.getStateObservable().pipe(
            flatMap(state => this.getQueryObservable(state).pipe(
                this.handleObservableError(),
                last(value => !!value),
            )),
            shareReplay({
                bufferSize: 1,
                refCount: true
            })
        );
    }

    protected combineStates(stateMap: StateMap<CollectionState>): CollectionState {
        const combinedState = Object.values(stateMap).reduce((acc, state) => {
            acc.skip = state.skip || acc.skip;
            acc.take = state.take || acc.take;
            acc.withinBox = state.withinBox || acc.withinBox;

            if (state.sort) {
                acc.sort = (acc.sort || []).concat(state.sort);
            }

            if (state.group) {
                acc.group = (acc.group || []).concat(state.group);
            }

            return acc;
        }, {});

        const stateFilter = combineFilters(Object.values(stateMap).filter(state => state.filter).map(state => state.filter));

        if (stateFilter) {
            combinedState.filter = stateFilter;
        }

        return cleanupState(combinedState);
    }

    protected getDataReload(): Subject<any> {
        return this.kinveyService.getDataReload(this.config.collection);
    }

    protected getStateObservable(): Observable<InternalState> {
        return merge(
            this.getDataReload().pipe(
                withLatestFrom(this.dataState.changes),
                map(([_, state]) => new InternalState(state))
            ),
            this.dataState.changes.pipe(
                map(state => new InternalState(state))
            )
        );
    }

    protected getStateObservableWithLoadMore(): Observable<InternalState> {
        return merge(
            of(new InternalState({})),
            this.getDataReload().pipe(
                withLatestFrom(this.dataState.changes),
                map(([_, state]) => new InternalState(state))
            ),
            this.loadOnDemand.pipe(
                withLatestFrom(this.dataState.changes),
                map(([_, state]) => new InternalState(state, 1))
            ),
            this.dataState.changes.pipe(
                map(state => new InternalState(state))
            )
        ).pipe(
            pairwise(),
            map(([oldState, newState]) => {
                if (newState.loadMorePage) {
                    newState.loadMorePage += oldState.loadMorePage || 0;
                }

                return newState;
            }),
        );
    }

    protected getQueryObservable(state: InternalState): Observable<PagingDataResult<T>> {
        this.isLoading.next(true);

        return this.kinveyService.findWithCount(this.config, state.collectionState)
            .pipe(
                map(({ data, total }) => ({
                    data: this.mapData(data),
                    total
                })),
                tap(() => this.isLoading.next(false))
            );
    }

    protected getQueryObservableWithLoadMore(state: InternalState): Observable<T[]> {
        this.isLoading.next(true);
        let queryState = state.collectionState;

        if (state.loadMorePage) {
            queryState = JSON.parse(JSON.stringify(queryState));
            queryState.skip = (queryState.skip || 0) + state.loadMorePage * queryState.take;
        }

        return this.kinveyService.find(this.config, queryState).pipe(
            map(data => this.mapData(data)),
            tap(() => this.isLoading.next(false))
        );
    }

    protected mapData(data: any[]): T[] {
        if (this.config.mapData) {
            return data.map(item => this.config.mapData(item));
        }

        return data;
    }
}
