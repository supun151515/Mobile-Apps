// -------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
// -------------------------------------------------------------------------
import { AbstractControl, FormControl, FormGroup, FormArray, ValidatorFn, AsyncValidatorFn, AbstractControlOptions } from '@angular/forms';

export interface KsFormGroup extends FormGroup {
    config: FormGroupConfig;
}

export interface AbstractControlConfig {
    options: AbstractControlOptions;
}

export interface FormControlConfig extends AbstractControlConfig {
    type: 'control';
    initial?: any;
}

export interface FormGroupConfig extends AbstractControlConfig {
    type: 'group';
    controls: { [key: string]: FormItemConfig };
}

export interface FormArrayConfig extends AbstractControlConfig {
    type: 'array';
    control: FormItemConfig;
}

export type FormItemConfig = FormControlConfig | FormGroupConfig | FormArrayConfig;

export function getControlOptions(validators: Array<ValidatorFn>): AbstractControlOptions {
    return {
        validators,
        asyncValidators: Array<AsyncValidatorFn>(),
        updateOn: 'change'
    };
}

export function buildFormGroup(formConfig: FormGroupConfig): KsFormGroup {
    const formGroup = createFormGroup(formConfig) as KsFormGroup;
    formGroup.config = formConfig;
    return formGroup;
}

export function createFormGroup(formConfig: FormGroupConfig): FormGroup {
    function createFormGroupControls(group: FormGroupConfig): { [key: string]: AbstractControl } {
        const controls = {};

        Object.keys(group.controls).forEach(key => {
            controls[key] = createControl(group.controls[key]);
        });

        return controls;
    }

    return new FormGroup(createFormGroupControls(formConfig), formConfig.options);
}

export function createControl(config: FormItemConfig): AbstractControl {
    switch (config.type) {
        case 'control':
            return new FormControl(config.initial, config.options);
        case 'group':
            return createFormGroup(config);
        case 'array':
            return new FormArray([]);
        default:
            break;
    }
}
