Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var kinvey_html5_sdk_1 = require("kinvey-html5-sdk");
var utils_1 = require("./utils");
var i0 = tslib_1.__importStar(require("@angular/core"));
var i1 = tslib_1.__importStar(require("./utils"));
var UserService = /** @class */ (function () {
    function UserService(config) {
        kinvey_html5_sdk_1.init(config);
    }
    UserService.prototype.exists = function (username, options) {
        return kinvey_html5_sdk_1.User.exists(username, options);
    };
    UserService.prototype.forgotUsername = function (email, options) {
        return kinvey_html5_sdk_1.User.forgotUsername(email, options);
    };
    UserService.prototype.login = function (username, password, options) {
        return kinvey_html5_sdk_1.User.login(username, password, options);
    };
    UserService.prototype.loginWithRedirectUri = function (redirectUri, options) {
        return kinvey_html5_sdk_1.User.loginWithRedirectUri(redirectUri, options);
    };
    UserService.prototype.loginWithMICUsingResourceOwnerCredentials = function (username, password, options) {
        return kinvey_html5_sdk_1.User.loginWithMICUsingResourceOwnerCredentials(username, password, options);
    };
    UserService.prototype.loginWithMIC = function (redirectUri, authorizationGrant, options) {
        return kinvey_html5_sdk_1.User.loginWithMIC(redirectUri, authorizationGrant, options);
    };
    UserService.prototype.logout = function (options) {
        return kinvey_html5_sdk_1.User.logout(options);
    };
    UserService.prototype.lookup = function (query, options) {
        return kinvey_html5_sdk_1.User.lookup(query, options);
    };
    UserService.prototype.me = function (options) {
        return kinvey_html5_sdk_1.User.me(options);
    };
    UserService.prototype.remove = function (id, options) {
        return kinvey_html5_sdk_1.User.remove(id, options);
    };
    UserService.prototype.resetPassword = function (username, options) {
        return kinvey_html5_sdk_1.User.resetPassword(username, options);
    };
    UserService.prototype.restore = function () {
        return kinvey_html5_sdk_1.User.restore();
    };
    UserService.prototype.signup = function (data, options) {
        return kinvey_html5_sdk_1.User.signup(data, options);
    };
    UserService.prototype.signUpWithIdentity = function () {
        return kinvey_html5_sdk_1.User.signUpWithIdentity();
    };
    UserService.prototype.update = function (data, options) {
        return kinvey_html5_sdk_1.User.update(data, options);
    };
    UserService.prototype.getActiveUser = function () {
        return kinvey_html5_sdk_1.User.getActiveUser();
    };
    UserService.prototype.verifyEmail = function (username, options) {
        return kinvey_html5_sdk_1.User.verifyEmail(username, options);
    };
    UserService.prototype.registerForLiveService = function (options) {
        return kinvey_html5_sdk_1.User.registerForLiveService(options);
    };
    UserService.prototype.unregisterFromLiveService = function (options) {
        return kinvey_html5_sdk_1.User.unregisterFromLiveService(options);
    };
    UserService.ngInjectableDef = i0.defineInjectable({ factory: function UserService_Factory() { return new UserService(i0.inject(i1.KinveyConfigToken)); }, token: UserService, providedIn: "root" });
    UserService = tslib_1.__decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        tslib_1.__param(0, core_1.Inject(utils_1.KinveyConfigToken)),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], UserService);
    return UserService;
}());
exports.UserService = UserService;
//# sourceMappingURL=user.service.js.map