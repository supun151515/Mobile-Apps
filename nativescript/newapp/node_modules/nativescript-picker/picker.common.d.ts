import { Property, Template } from "tns-core-modules/ui/core/view/view";
import { EventData } from "tns-core-modules/ui/core/view/view";
import { TextField } from 'tns-core-modules/ui/text-field/text-field';
import { ItemEventData, TemplatedItemsView } from "tns-core-modules/ui/list-view/list-view";
import { Page } from 'tns-core-modules/ui/page';
export interface ItemsSource {
    length: number;
    getItem(index: number): any;
}
export declare namespace knownTemplates {
    let itemTemplate: string;
}
export interface PickerField {
    on(eventNames: string, callback: (data: EventData) => void, thisArg?: any): any;
    on(event: "itemLoading", callback: (args: ItemEventData) => void, thisArg?: any): any;
}
export declare class PickerPage extends Page {
}
export declare class PickerField extends TextField implements TemplatedItemsView {
    static itemLoadingEvent: string;
    pickerTitle: string;
    items: any[] | ItemsSource;
    itemTemplate: string | Template;
    modalAnimated: boolean;
    textField: string;
    valueField: string;
    selectedValue: any;
    selectedIndex: number;
    iOSCloseButtonPosition: "left" | "right";
    iOSCloseButtonIcon: number;
    androidCloseButtonPosition: "navigationButton" | "actionBar" | "actionBarIfRoom" | "popup";
    androidCloseButtonIcon: string;
    static pickerOpenedEvent: string;
    static pickerClosedEvent: string;
    private _modalListView;
    private _modalRoot;
    private _page;
    private _modalGridLayout;
    private closeCallback;
    constructor();
    disposeNativeView(): void;
    private createModalView;
    private disposeModalView;
    private initModalView;
    private applyCssScope;
    private detachModalViewHandlers;
    private shownModallyHandler;
    private tapHandler;
    private listViewItemTapHandler;
    private listViewItemLoadingHandler;
    private getValueFromField;
    static modalAnimatedProperty: Property<PickerField, boolean>;
    private static modalAnimatedChanged;
    static selectedValueProperty: Property<PickerField, any>;
    private static selectedValueChanged;
    static valueFieldProperty: Property<PickerField, string>;
    private static valueFieldChanged;
    static textFieldProperty: Property<PickerField, string>;
    private static textFieldChanged;
    static iOSCloseButtonPositionProperty: Property<PickerField, "left" | "right">;
    private static iOSCloseButtonPositionChanged;
    static iOSCloseButtonIconProperty: Property<PickerField, number>;
    private static iOSCloseButtonIconChanged;
    static androidCloseButtonPositionProperty: Property<PickerField, "actionBar" | "actionBarIfRoom" | "popup">;
    private static androidCloseButtonPositionChanged;
    static androidCloseButtonIconProperty: Property<PickerField, string>;
    private static androidCloseButtonIconChanged;
    static pickerTitleProperty: Property<PickerField, string>;
    private static pickerTitleChanged;
    static itemTemplateProperty: Property<PickerField, string | Template>;
    private static itemTemplateChanged;
    static editableProperty: Property<PickerField, boolean>;
    private static editableChanged;
    static itemsProperty: Property<PickerField, any[] | ItemsSource>;
    private static itemsChanged;
    private onItemsChanged;
    private onSelectedValuePropertyChanged;
    private onValueFieldPropertyChanged;
    private onTextFieldPropertyChanged;
    private onIOSCloseButtonPositionPropertyChanged;
    private onIOSCloseButtonIconPropertyChanged;
    private onAndroidCloseButtonPositionPropertyChanged;
    private onAndroidCloseButtonIconPropertyChanged;
    private onModalAnimatedPropertyChanged;
    private onPickerTitlePropertyChanged;
    private onItemTemplatePropertyChanged;
    private onEditablePropertyChanged;
    private getDataItem;
    private updateListView;
    private updateActionBarTitle;
    refresh(): void;
    private _updateSelectedValue;
    private updatePickerText;
    protected onModalAnimatedChanged(oldValue: boolean, newValue: boolean): void;
    protected onSelectedValueChanged(oldValue: any, newValue: any): void;
    private getObjectFromValue;
    private hasItem;
    private _getDataItem;
    protected onValueFieldChanged(oldValue: string, newValue: string): void;
    protected onTextFieldChanged(oldValue: string, newValue: string): void;
    protected onIOSCloseButtonPositionChanged(oldValue: "left" | "right", newValue: "left" | "right"): void;
    protected onIOSCloseButtonIconChanged(oldValue: number, newValue: number): void;
    protected onAndroidCloseButtonPositionChanged(oldValue: "actionBar" | "actionBarIfRoom" | "popup", newValue: "actionBar" | "actionBarIfRoom" | "popup"): void;
    protected onAndroidCloseButtonIconChanged(oldValue: string, newValue: string): void;
    protected onPickerTitleChanged(oldValue: string, newValue: string): void;
    protected onItemTemplateChanged(oldValue: string | Template, newValue: string | Template): void;
    protected onEditableChanged(oldValue: boolean, newValue: boolean): void;
}
