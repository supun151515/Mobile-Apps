"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var view_1 = require("tns-core-modules/ui/core/view/view");
var text_field_1 = require("tns-core-modules/ui/text-field/text-field");
var button_1 = require("tns-core-modules/ui/button/button");
var list_view_1 = require("tns-core-modules/ui/list-view/list-view");
var page_1 = require("tns-core-modules/ui/page");
var observable_2 = require("tns-core-modules/data/observable");
var weak_event_listener_1 = require("tns-core-modules/ui/core/weak-event-listener");
var observable_array_1 = require("tns-core-modules/data/observable-array/observable-array");
var grid_layout_1 = require("tns-core-modules/ui/layouts/grid-layout/grid-layout");
var action_bar_1 = require("tns-core-modules/ui/action-bar/action-bar");
var frame_1 = require("tns-core-modules/ui/frame/frame");
var platform_1 = require("tns-core-modules/platform");
var knownTemplates;
(function (knownTemplates) {
    knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));
var PickerPage = (function (_super) {
    __extends(PickerPage, _super);
    function PickerPage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PickerPage = __decorate([
        view_1.CSSType("PickerPage")
    ], PickerPage);
    return PickerPage;
}(page_1.Page));
exports.PickerPage = PickerPage;
var PickerField = (function (_super) {
    __extends(PickerField, _super);
    function PickerField() {
        var _this = _super.call(this) || this;
        _this.on(button_1.Button.tapEvent, _this.tapHandler.bind(_this));
        return _this;
    }
    PickerField_1 = PickerField;
    PickerField.prototype.disposeNativeView = function () {
        this.off(button_1.Button.tapEvent, this.tapHandler);
        _super.prototype.disposeNativeView.call(this);
    };
    PickerField.prototype.createModalView = function () {
        this._modalRoot = new frame_1.Frame();
        this._page = new PickerPage();
        this._modalListView = new list_view_1.ListView();
        this._modalGridLayout = new grid_layout_1.GridLayout();
        this.initModalView();
        this._page.content = this._modalGridLayout;
    };
    PickerField.prototype.disposeModalView = function () {
        if (this._modalRoot) {
            this.detachModalViewHandlers();
            this._modalRoot = undefined;
            this._page = undefined;
            this._modalListView = undefined;
            this._modalGridLayout = undefined;
        }
    };
    PickerField.prototype.initModalView = function () {
        var _this = this;
        this.applyCssScope(this._page, true);
        if (this.pickerTitle && this.pickerTitle !== "") {
            this._page.actionBar.title = this.pickerTitle;
        }
        else {
            this._modalRoot.actionBarVisibility = "always";
            this._page.actionBar.title = "";
        }
        this.applyCssScope(this._page.actionBar);
        var isNavigationButton = platform_1.isAndroid && this.androidCloseButtonPosition === "navigationButton";
        var closeButton = isNavigationButton ? new action_bar_1.NavigationButton() : new action_bar_1.ActionItem();
        closeButton.text = "Close";
        closeButton.on(button_1.Button.tapEvent, function () {
            _this.closeCallback();
        });
        this.applyCssScope(closeButton);
        if (closeButton.ios) {
            closeButton.ios.position = this.iOSCloseButtonPosition;
            closeButton.ios.systemIcon = this.iOSCloseButtonIcon;
        }
        if (closeButton.android) {
            closeButton.android.systemIcon = this.androidCloseButtonIcon;
            closeButton.android.position = this.androidCloseButtonPosition;
        }
        if (isNavigationButton) {
            this._page.actionBar.navigationButton = closeButton;
        }
        else {
            this._page.actionBar.actionItems.addItem(closeButton);
        }
        this._modalRoot.on(page_1.Page.shownModallyEvent, this.shownModallyHandler.bind(this));
        this._modalListView.on(list_view_1.ListView.itemLoadingEvent, this.listViewItemLoadingHandler.bind(this));
        this._modalListView.on(list_view_1.ListView.itemTapEvent, this.listViewItemTapHandler.bind(this));
        this._modalListView.items = this.items;
        this.applyCssScope(this._modalGridLayout);
        this._modalGridLayout.addChild(this._modalListView);
    };
    PickerField.prototype.applyCssScope = function (view, transferClasses) {
        if (transferClasses === void 0) { transferClasses = false; }
        var ngKey = Object.keys(this).find(function (key) { return key.startsWith('_ngcontent'); });
        var vueKey = Object.keys(this).find(function (key) { return key.startsWith('data-v'); });
        if (ngKey) {
            view[ngKey] = this[ngKey];
        }
        if (vueKey) {
            view[vueKey] = this[vueKey];
        }
        if (transferClasses && this.className) {
            var classNames = this.className.split(' ');
            classNames.forEach(function (element) {
                view.cssClasses.add(element);
            });
        }
    };
    PickerField.prototype.detachModalViewHandlers = function () {
        this._modalRoot.off(page_1.Page.shownModallyEvent, this.shownModallyHandler.bind(this));
        this._modalListView.off(list_view_1.ListView.itemTapEvent, this.listViewItemTapHandler.bind(this));
        this._modalListView.off(list_view_1.ListView.itemLoadingEvent, this.listViewItemLoadingHandler.bind(this));
    };
    PickerField.prototype.shownModallyHandler = function (args) {
        var context = args.context;
        this.closeCallback = args.closeCallback;
        var page = args.object;
        page.bindingContext = observable_2.fromObject(context);
    };
    PickerField.prototype.tapHandler = function (args) {
        var _this = this;
        this.createModalView();
        this.updateListView();
        this.updateActionBarTitle();
        var context = this;
        var callback = function (sender, selectedIndex) {
            _this.disposeModalView();
            var closedArgs = {
                eventName: PickerField_1.pickerClosedEvent,
                object: _this
            };
            _this.notify(closedArgs);
        };
        this._modalRoot.navigate(function () { return _this._page; });
        var modalOptions = {
            context: context, closeCallback: callback, fullscreen: true, animated: this.modalAnimated
        };
        this.showModal(this._modalRoot, modalOptions);
        var openedArgs = {
            eventName: PickerField_1.pickerOpenedEvent,
            object: this
        };
        this.notify(openedArgs);
    };
    PickerField.prototype.listViewItemTapHandler = function (args) {
        if (args.index !== undefined) {
            var object = this.getDataItem(args.index);
            this.selectedIndex = args.index;
            this._updateSelectedValue(object);
        }
        this.closeCallback(args.view, args.index);
    };
    PickerField.prototype.listViewItemLoadingHandler = function (args) {
        return this.notify(args);
    };
    PickerField.prototype.getValueFromField = function (manipulatedProperty, propertyName, object) {
        if (!propertyName) {
            return undefined;
        }
        if (object.hasOwnProperty(propertyName)) {
            return object[propertyName];
        }
        console.log("Warning: Cannot update the '" + manipulatedProperty + "' property of PickerField. The '" + propertyName + "' property not found on the objects in the 'items' collection.");
        return undefined;
    };
    PickerField.modalAnimatedChanged = function (target, oldValue, newValue) {
        target.onModalAnimatedPropertyChanged(oldValue, newValue);
    };
    PickerField.selectedValueChanged = function (target, oldValue, newValue) {
        target.onSelectedValuePropertyChanged(oldValue, newValue);
    };
    PickerField.valueFieldChanged = function (target, oldValue, newValue) {
        target.onValueFieldPropertyChanged(oldValue, newValue);
    };
    PickerField.textFieldChanged = function (target, oldValue, newValue) {
        target.onTextFieldPropertyChanged(oldValue, newValue);
    };
    PickerField.iOSCloseButtonPositionChanged = function (target, oldValue, newValue) {
        target.onIOSCloseButtonPositionPropertyChanged(oldValue, newValue);
    };
    PickerField.iOSCloseButtonIconChanged = function (target, oldValue, newValue) {
        target.onIOSCloseButtonIconPropertyChanged(oldValue, newValue);
    };
    PickerField.androidCloseButtonPositionChanged = function (target, oldValue, newValue) {
        target.onAndroidCloseButtonPositionPropertyChanged(oldValue, newValue);
    };
    PickerField.androidCloseButtonIconChanged = function (target, oldValue, newValue) {
        target.onAndroidCloseButtonIconPropertyChanged(oldValue, newValue);
    };
    PickerField.pickerTitleChanged = function (target, oldValue, newValue) {
        target.onPickerTitlePropertyChanged(oldValue, newValue);
    };
    PickerField.itemTemplateChanged = function (target, oldValue, newValue) {
        target.onItemTemplatePropertyChanged(oldValue, newValue);
    };
    PickerField.editableChanged = function (target, oldValue, newValue) {
        target.onEditablePropertyChanged(oldValue, newValue);
    };
    PickerField.itemsChanged = function (target, oldValue, newValue) {
        if (target && target._modalListView) {
            target._modalListView.items = newValue;
        }
        if (oldValue instanceof observable_1.Observable) {
            weak_event_listener_1.removeWeakEventListener(oldValue, observable_array_1.ObservableArray.changeEvent, target.onItemsChanged, target);
        }
        if (newValue instanceof observable_1.Observable) {
            weak_event_listener_1.addWeakEventListener(newValue, observable_array_1.ObservableArray.changeEvent, target.onItemsChanged, target);
        }
        if (target && target._modalListView) {
            target._modalListView.refresh();
        }
    };
    PickerField.prototype.onItemsChanged = function (args) {
        this.refresh();
    };
    PickerField.prototype.onSelectedValuePropertyChanged = function (oldValue, newValue) {
        this.onSelectedValueChanged(oldValue, newValue);
    };
    PickerField.prototype.onValueFieldPropertyChanged = function (oldValue, newValue) {
        this.onValueFieldChanged(oldValue, newValue);
    };
    PickerField.prototype.onTextFieldPropertyChanged = function (oldValue, newValue) {
        this.onTextFieldChanged(oldValue, newValue);
    };
    PickerField.prototype.onIOSCloseButtonPositionPropertyChanged = function (oldValue, newValue) {
        this.onIOSCloseButtonPositionChanged(oldValue, newValue);
    };
    PickerField.prototype.onIOSCloseButtonIconPropertyChanged = function (oldValue, newValue) {
        this.onIOSCloseButtonIconChanged(oldValue, newValue);
    };
    PickerField.prototype.onAndroidCloseButtonPositionPropertyChanged = function (oldValue, newValue) {
        this.onAndroidCloseButtonPositionChanged(oldValue, newValue);
    };
    PickerField.prototype.onAndroidCloseButtonIconPropertyChanged = function (oldValue, newValue) {
        this.onAndroidCloseButtonIconChanged(oldValue, newValue);
    };
    PickerField.prototype.onModalAnimatedPropertyChanged = function (oldValue, newValue) {
        this.onModalAnimatedChanged(oldValue, newValue);
    };
    PickerField.prototype.onPickerTitlePropertyChanged = function (oldValue, newValue) {
        this.onPickerTitleChanged(oldValue, newValue);
    };
    PickerField.prototype.onItemTemplatePropertyChanged = function (oldValue, newValue) {
        this.onItemTemplateChanged(oldValue, newValue);
    };
    PickerField.prototype.onEditablePropertyChanged = function (oldValue, newValue) {
        this.onEditableChanged(oldValue, newValue);
    };
    PickerField.prototype.getDataItem = function (index) {
        var thisItems = this.items;
        return thisItems.getItem ? thisItems.getItem(index) : thisItems[index];
    };
    PickerField.prototype.updateListView = function () {
        if (this._modalListView && this.itemTemplate) {
            this._modalListView.itemTemplate = this.itemTemplate;
            this._modalListView.refresh();
        }
    };
    PickerField.prototype.updateActionBarTitle = function () {
        if (this._page && this._page.actionBar) {
            if (this.pickerTitle && this.pickerTitle !== "") {
                this._page.actionBar.title = this.pickerTitle;
            }
            else {
                this._modalRoot.actionBarVisibility = "always";
                this._page.actionBar.title = "";
            }
        }
    };
    PickerField.prototype.refresh = function () {
        if (this._modalListView) {
            this._modalListView.refresh();
        }
    };
    PickerField.prototype._updateSelectedValue = function (object) {
        var value = this.getValueFromField("selectedValue", this.valueField, object);
        this.selectedValue = value === undefined ? object : value;
    };
    PickerField.prototype.updatePickerText = function (object) {
        var textValue = this.getValueFromField("text", this.textField, object);
        textValue = textValue === undefined ? object : textValue;
        this.text = textValue;
    };
    PickerField.prototype.onModalAnimatedChanged = function (oldValue, newValue) { };
    PickerField.prototype.onSelectedValueChanged = function (oldValue, newValue) {
        if (this.hasItem(newValue)) {
            this.updatePickerText(newValue);
            return;
        }
        var dataItem = this.getObjectFromValue(this.valueField, newValue);
        if (dataItem) {
            this.updatePickerText(dataItem);
        }
        else {
            this.text = newValue;
        }
    };
    PickerField.prototype.getObjectFromValue = function (propertyName, value) {
        if (!propertyName) {
            return undefined;
        }
        if (this.items) {
            for (var i = 0; i < this.items.length; i++) {
                var item = this._getDataItem(i);
                if (item.hasOwnProperty(propertyName)) {
                    var dataItemValue = item[propertyName];
                    if (dataItemValue === value) {
                        return item;
                    }
                }
            }
        }
        return undefined;
    };
    PickerField.prototype.hasItem = function (object) {
        if (this.items) {
            for (var i = 0; i < this.items.length; i++) {
                var item = this._getDataItem(i);
                if (item === object) {
                    return true;
                }
            }
        }
        return false;
    };
    PickerField.prototype._getDataItem = function (index) {
        var thisItems = this.items;
        return thisItems.getItem ? thisItems.getItem(index) : thisItems[index];
    };
    PickerField.prototype.onValueFieldChanged = function (oldValue, newValue) { };
    PickerField.prototype.onTextFieldChanged = function (oldValue, newValue) { };
    PickerField.prototype.onIOSCloseButtonPositionChanged = function (oldValue, newValue) { };
    PickerField.prototype.onIOSCloseButtonIconChanged = function (oldValue, newValue) { };
    PickerField.prototype.onAndroidCloseButtonPositionChanged = function (oldValue, newValue) { };
    PickerField.prototype.onAndroidCloseButtonIconChanged = function (oldValue, newValue) { };
    PickerField.prototype.onPickerTitleChanged = function (oldValue, newValue) {
        this.updateActionBarTitle();
    };
    PickerField.prototype.onItemTemplateChanged = function (oldValue, newValue) {
        this.updateListView();
    };
    PickerField.prototype.onEditableChanged = function (oldValue, newValue) {
        if (newValue) {
            console.log("PickerField does not support 'editable = true'");
        }
        this.editable = false;
    };
    var PickerField_1;
    PickerField.itemLoadingEvent = "itemLoading";
    PickerField.pickerOpenedEvent = "pickerOpened";
    PickerField.pickerClosedEvent = "pickerClosed";
    PickerField.modalAnimatedProperty = new view_1.Property({
        name: "modalAnimated",
        defaultValue: true,
        valueConverter: view_1.booleanConverter,
        valueChanged: PickerField_1.modalAnimatedChanged
    });
    PickerField.selectedValueProperty = new view_1.Property({
        name: "selectedValue",
        valueChanged: PickerField_1.selectedValueChanged
    });
    PickerField.valueFieldProperty = new view_1.Property({
        name: "valueField",
        valueChanged: PickerField_1.valueFieldChanged
    });
    PickerField.textFieldProperty = new view_1.Property({
        name: "textField",
        valueChanged: PickerField_1.textFieldChanged
    });
    PickerField.iOSCloseButtonPositionProperty = new view_1.Property({
        name: "iOSCloseButtonPosition",
        defaultValue: "right",
        valueChanged: PickerField_1.iOSCloseButtonPositionChanged
    });
    PickerField.iOSCloseButtonIconProperty = new view_1.Property({
        name: "iOSCloseButtonIcon",
        defaultValue: 1,
        valueChanged: PickerField_1.iOSCloseButtonIconChanged
    });
    PickerField.androidCloseButtonPositionProperty = new view_1.Property({
        name: "androidCloseButtonPosition",
        defaultValue: "actionBar",
        valueChanged: PickerField_1.androidCloseButtonPositionChanged
    });
    PickerField.androidCloseButtonIconProperty = new view_1.Property({
        name: "androidCloseButtonIcon",
        defaultValue: "ic_menu_close_clear_cancel",
        valueChanged: PickerField_1.androidCloseButtonIconChanged
    });
    PickerField.pickerTitleProperty = new view_1.Property({
        name: "pickerTitle",
        defaultValue: undefined,
        valueChanged: PickerField_1.pickerTitleChanged
    });
    PickerField.itemTemplateProperty = new view_1.Property({
        name: "itemTemplate",
        defaultValue: undefined,
        valueChanged: PickerField_1.itemTemplateChanged
    });
    PickerField.editableProperty = new view_1.Property({
        name: "editable",
        defaultValue: false,
        valueConverter: view_1.booleanConverter,
        valueChanged: PickerField_1.editableChanged
    });
    PickerField.itemsProperty = new view_1.Property({
        name: "items",
        valueChanged: PickerField_1.itemsChanged
    });
    PickerField = PickerField_1 = __decorate([
        view_1.CSSType("PickerField"),
        __metadata("design:paramtypes", [])
    ], PickerField);
    return PickerField;
}(text_field_1.TextField));
exports.PickerField = PickerField;
PickerField.modalAnimatedProperty.register(PickerField);
PickerField.pickerTitleProperty.register(PickerField);
PickerField.itemTemplateProperty.register(PickerField);
PickerField.editableProperty.register(PickerField);
PickerField.itemsProperty.register(PickerField);
PickerField.textFieldProperty.register(PickerField);
PickerField.valueFieldProperty.register(PickerField);
PickerField.selectedValueProperty.register(PickerField);
PickerField.iOSCloseButtonPositionProperty.register(PickerField);
PickerField.iOSCloseButtonIconProperty.register(PickerField);
PickerField.androidCloseButtonPositionProperty.register(PickerField);
PickerField.androidCloseButtonIconProperty.register(PickerField);
//# sourceMappingURL=picker.common.js.map