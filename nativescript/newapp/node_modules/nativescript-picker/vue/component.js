"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var VUE_VIEW = '__vueVNodeRef__';
exports.default = {
    props: {
        items: {
            type: Array,
            required: true
        },
        '+alias': {
            type: String,
            default: 'item'
        },
        '+index': {
            type: String
        },
        _itemTemplateSelector: {
            type: Function,
            default: undefined,
        },
        _itemTemplatesInternal: Array(),
    },
    template: "\n      <NativePickerField\n        ref=\"picker\"\n        :items=\"items\"\n        v-bind=\"$attrs\"\n        v-on=\"$listeners\"\n        @itemLoading=\"onItemLoading\"\n      >\n        <slot />\n      </NativePickerField>\n    ",
    watch: {
        items: {
            handler: function (newVal) {
                this.$refs.picker.setAttribute('items', newVal);
                this.refresh();
            },
            deep: true
        }
    },
    created: function () {
        this.getItemContext = getItemContext.bind(this);
    },
    mounted: function () {
    },
    methods: {
        onItemLoading: function (args) {
            var _this = this;
            if (!this.$templates) {
                return;
            }
            if (this.$refs.picker._itemTemplatesInternal !== this.$refs.picker.nativeView._modalListView._itemTemplatesInternal) {
                this.$refs.picker.nativeView._modalListView._itemTemplatesInternal = this.$templates.getKeyedTemplates();
                this.$refs.picker._itemTemplatesInternal = this.$refs.picker.nativeView._modalListView._itemTemplatesInternal;
            }
            if (!this.$refs.picker._itemTemplateSelector || (this.$refs.picker._itemTemplateSelector !== this.$refs.picker.nativeView._modalListView._itemTemplateSelector)) {
                this.$refs.picker.nativeView._modalListView._itemTemplateSelector = function (item, index) {
                    return _this.$templates.selectorFn(_this.getItemContext(item, index));
                };
                this.$refs.picker._itemTemplateSelector = this.$refs.picker.nativeView._modalListView._itemTemplateSelector;
            }
            var index = args.index;
            var items = args.object.items;
            var currentItem = typeof items.getItem === 'function'
                ? items.getItem(index)
                : items[index];
            var name = args.object._itemTemplateSelector(currentItem, index, items);
            var context = this.getItemContext(currentItem, index);
            var oldVnode = args.view && args.view[VUE_VIEW];
            args.view = this.$templates.patchTemplate(name, context, oldVnode);
        },
        refresh: function () {
            this.$refs.picker.nativeView.refresh();
        }
    }
};
function getItemContext(item, index, alias, index_alias) {
    var _a;
    if (alias === void 0) { alias = this.$props['+alias']; }
    if (index_alias === void 0) { index_alias = this.$props['+index']; }
    return _a = {},
        _a[alias] = item,
        _a[index_alias || '$index'] = index,
        _a.$even = index % 2 === 0,
        _a.$odd = index % 2 !== 0,
        _a;
}
//# sourceMappingURL=component.js.map