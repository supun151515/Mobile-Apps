Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var store = new Map();
function getTable(dbName, tableName) {
    return store.get(dbName + "." + tableName) || new Map();
}
function setTable(dbName, tableName, table) {
    return store.set(dbName + "." + tableName, table);
}
function find(dbName, tableName) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var table;
        return tslib_1.__generator(this, function (_a) {
            table = getTable(dbName, tableName);
            return [2 /*return*/, Array.from(table.values())];
        });
    });
}
exports.find = find;
function count(dbName, tableName) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var docs;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, find(dbName, tableName)];
                case 1:
                    docs = _a.sent();
                    return [2 /*return*/, docs.length];
            }
        });
    });
}
exports.count = count;
function findById(dbName, tableName, id) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var docs;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, find(dbName, tableName)];
                case 1:
                    docs = _a.sent();
                    return [2 /*return*/, docs.find(function (doc) { return doc._id === id; })];
            }
        });
    });
}
exports.findById = findById;
function save(dbName, tableName, docs) {
    if (docs === void 0) { docs = []; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var table;
        return tslib_1.__generator(this, function (_a) {
            table = getTable(dbName, tableName);
            docs.forEach(function (doc) {
                table.set(doc._id, doc);
            });
            setTable(dbName, tableName, table);
            return [2 /*return*/, docs];
        });
    });
}
exports.save = save;
function removeById(dbName, tableName, id) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var table;
        return tslib_1.__generator(this, function (_a) {
            table = getTable(dbName, tableName);
            if (table.delete(id)) {
                setTable(dbName, tableName, table);
                return [2 /*return*/, 1];
            }
            return [2 /*return*/, 0];
        });
    });
}
exports.removeById = removeById;
function clear(dbName, tableName) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            store.delete(dbName + "." + tableName);
            return [2 /*return*/, true];
        });
    });
}
exports.clear = clear;
function clearDatabase() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            store.clear();
            return [2 /*return*/, true];
        });
    });
}
exports.clearDatabase = clearDatabase;
//# sourceMappingURL=memory.js.map