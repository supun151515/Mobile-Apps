Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
function getTable(dbName, tableName) {
    var docsJson = window.sessionStorage.getItem(dbName + "." + tableName);
    if (docsJson) {
        var docs = JSON.parse(docsJson);
        var map_1 = new Map();
        docs.forEach(function (doc) {
            map_1.set(doc._id, doc);
        });
        return map_1;
    }
    return new Map();
}
function setTable(dbName, tableName, table) {
    var docs = [];
    table.forEach(function (value) { return docs.push(value); });
    window.sessionStorage.setItem(dbName + "." + tableName, JSON.stringify(docs));
}
function find(dbName, tableName) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var table;
        return tslib_1.__generator(this, function (_a) {
            table = getTable(dbName, tableName);
            if (table) {
                return [2 /*return*/, Array.from(table.values())];
            }
            return [2 /*return*/, []];
        });
    });
}
exports.find = find;
function count(dbName, tableName) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var docs;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, find(dbName, tableName)];
                case 1:
                    docs = _a.sent();
                    return [2 /*return*/, docs.length];
            }
        });
    });
}
exports.count = count;
function findById(dbName, tableName, id) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var docs;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, find(dbName, tableName)];
                case 1:
                    docs = _a.sent();
                    return [2 /*return*/, docs.find(function (doc) { return doc._id === id; })];
            }
        });
    });
}
exports.findById = findById;
function save(dbName, tableName, docs) {
    if (docs === void 0) { docs = []; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var table;
        return tslib_1.__generator(this, function (_a) {
            table = getTable(dbName, tableName);
            docs.forEach(function (doc) {
                table.set(doc._id, doc);
            });
            setTable(dbName, tableName, table);
            return [2 /*return*/, docs];
        });
    });
}
exports.save = save;
function removeById(dbName, tableName, id) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var table;
        return tslib_1.__generator(this, function (_a) {
            table = getTable(dbName, tableName);
            if (table.delete(id)) {
                setTable(dbName, tableName, table);
                return [2 /*return*/, 1];
            }
            return [2 /*return*/, 0];
        });
    });
}
exports.removeById = removeById;
function clear(dbName, tableName) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            window.sessionStorage.removeItem(dbName + "." + tableName);
            return [2 /*return*/, true];
        });
    });
}
exports.clear = clear;
function clearDatabase(dbName, exclude) {
    if (exclude === void 0) { exclude = []; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var keys, i, len;
        return tslib_1.__generator(this, function (_a) {
            keys = [];
            for (i = 0, len = window.sessionStorage.length; i < len; i += 1) {
                keys.push(window.sessionStorage.key(i));
            }
            keys.forEach(function (key) {
                if (key && key.indexOf(dbName) >= 0 && exclude.indexOf(key) === -1) {
                    window.sessionStorage.removeItem(key);
                }
            });
            return [2 /*return*/, true];
        });
    });
}
exports.clearDatabase = clearDatabase;
//# sourceMappingURL=sessionstorage.js.map