Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var isString_1 = tslib_1.__importDefault(require("lodash/isString"));
var kinvey_js_sdk_1 = require("kinvey-js-sdk");
var MASTER_TABLE_NAME = 'sqlite_master';
var SIZE = 2 * 1024 * 1024; // Database size in bytes
function execute(dbName, tableName, sqlQueries, write) {
    if (write === void 0) { write = false; }
    var escapedTableName = "\"" + tableName + "\"";
    var isMaster = tableName === MASTER_TABLE_NAME;
    return new Promise(function (resolve, reject) {
        try {
            var db = window.openDatabase(dbName, 1, 'Kinvey WebSQL', SIZE);
            var writeTxn = write || typeof db.readTransaction !== 'function';
            db[writeTxn ? 'transaction' : 'readTransaction'](function (tx) {
                new Promise(function (resolve) {
                    if (write && !isMaster) {
                        tx.executeSql("CREATE TABLE IF NOT EXISTS " + escapedTableName + " (key BLOB PRIMARY KEY NOT NULL, value BLOB NOT NULL)", [], function () {
                            resolve();
                        });
                    }
                    else {
                        resolve();
                    }
                })
                    .then(function () {
                    return Promise.all(sqlQueries.map(function (query) {
                        return new Promise(function (resolve) {
                            tx.executeSql(query[0].replace('#{table}', escapedTableName), query[1], function (_, resultSet) {
                                var response = {
                                    rowCount: resultSet.rows.length || resultSet.rowsAffected,
                                    result: []
                                };
                                if (resultSet.rows.length > 0) {
                                    for (var i = 0, len = resultSet.rows.length; i < len; i += 1) {
                                        var value = resultSet.rows.item(i).value;
                                        try {
                                            var doc = isMaster ? value : JSON.parse(value);
                                            response.result.push(doc);
                                        }
                                        catch (error) {
                                            response.result.push(value);
                                        }
                                    }
                                }
                                resolve(response);
                            });
                        });
                    }));
                })
                    .then(function (responses) {
                    if (responses === void 0) { responses = []; }
                    return responses.reduce(function (_a, response) {
                        var _b = _a.rowCount, rowCount = _b === void 0 ? 0 : _b, _c = _a.result, result = _c === void 0 ? [] : _c;
                        return {
                            rowCount: rowCount + response.rowCount,
                            result: result.concat(response.result)
                        };
                    }, { rowCount: 0, result: [] });
                })
                    .then(resolve)
                    .catch(reject);
            }, function (error) {
                var errorMessage = isString_1.default(error) ? error : error.message;
                if (errorMessage && errorMessage.indexOf('no such table') === -1) {
                    resolve({ rowCount: 0, result: [] });
                }
                else {
                    var sql = 'SELECT name AS value from #{table} WHERE type = ? AND name = ?';
                    var parameters = ['table', tableName];
                    execute(dbName, MASTER_TABLE_NAME, [[sql, parameters]])
                        .then(function (response) {
                        if (response.result.length === 0) {
                            return resolve({ rowCount: 0, result: [] });
                        }
                        return reject(new kinvey_js_sdk_1.Errors.KinveyError("Unable to open a transaction for the " + tableName + " collection on the " + dbName + " WebSQL database."));
                    })
                        .catch(reject);
                }
            });
        }
        catch (error) {
            reject(error);
        }
    });
}
function find(dbName, tableName) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var response;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, execute(dbName, tableName, [['SELECT value FROM #{table}']])];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, response.result];
            }
        });
    });
}
exports.find = find;
function count(dbName, tableName) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var response;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, execute(dbName, tableName, [['SELECT COUNT(DISTINCT key) AS value FROM #{table}']])];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, response.result.shift() || 0];
            }
        });
    });
}
exports.count = count;
function findById(dbName, tableName, id) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var response;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, execute(dbName, tableName, [['SELECT value FROM #{table} WHERE key = ?', [id]]])];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, response.result.shift()];
            }
        });
    });
}
exports.findById = findById;
function save(dbName, tableName, docs) {
    if (docs === void 0) { docs = []; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var sqlQueries;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    sqlQueries = docs.map(function (doc) { return ['REPLACE INTO #{table} (key, value) VALUES (?, ?)', [doc._id, JSON.stringify(doc)]]; });
                    return [4 /*yield*/, execute(dbName, tableName, sqlQueries, true)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, docs];
            }
        });
    });
}
exports.save = save;
function removeById(dbName, tableName, id) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var response;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, execute(dbName, tableName, [['DELETE FROM #{table} WHERE key = ?', [id]]], true)];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, response.rowCount];
            }
        });
    });
}
exports.removeById = removeById;
function clear(dbName, tableName) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, execute(dbName, tableName, [['DROP TABLE IF EXISTS #{table}']], true)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, true];
            }
        });
    });
}
exports.clear = clear;
function clearDatabase(dbName, exclude) {
    if (exclude === void 0) { exclude = []; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var response, tables;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, execute(dbName, MASTER_TABLE_NAME, [['SELECT name AS value FROM #{table} WHERE type = ? AND value NOT LIKE ?', ['table', '__Webkit%']]])];
                case 1:
                    response = _a.sent();
                    tables = response.result;
                    if (!(tables.length > 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, Promise.all(tables.map(function (tableName) {
                            if (exclude.indexOf(tableName) === -1) {
                                return execute(dbName, tableName, [['DROP TABLE IF EXISTS #{table}']], true);
                            }
                            return null;
                        }))];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3: return [2 /*return*/, true];
            }
        });
    });
}
exports.clearDatabase = clearDatabase;
//# sourceMappingURL=websql.js.map